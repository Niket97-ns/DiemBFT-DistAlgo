# type: ignore
import nacl.utils
from nacl.signing import SigningKey
from nacl.signing import VerifyKey

from block_tree import BlockTree
from leader_election import LeaderElection
from pacemaker import Pacemaker
from safety import Safety
from mempool import Mempool
from tc import TC
from vote_info import VoteInfo
from ledger_commit_info import LedgerCommitInfo
from qc import QC


class Replica(process):
    def setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f, t=25):

        self.privateKey = privateKey
        self.clientPublicKeyMap = clientPublicKeyMap
        self.replicaPublicKeyMap = replicaPublicKeyMap
        self.leaderElection = LeaderElection(list(replicaPublicKeyMap.keys()))

        self.replicaPublicKeyMap.pop(self)
        self.commit_cache = {}
        self.f = f
        self.t = t
        # ------------- vote info ---------------- #
        # ------------- default values --------------- #
        self.vote_info = VoteInfo()

        # ------------- ledger commit info -------- #
        # ------------- default values --------------- #
        self.ledger_commit_info = LedgerCommitInfo(vote_info=self.vote_info)

        # ------------- block tree --------------- #
        # ------------- default values --------------- #
        self.high_qc = QC(vote_info=self.vote_info,
                          ledger_commit_info=self.ledger_commit_info)
        self.high_commit_qc = QC(
            vote_info=self.vote_info, ledger_commit_info=self.ledger_commit_info)

        self.blockTree = BlockTree(self.high_qc, self.high_commit_qc, self.f)

        # TODO: Remove self.round
        self.curr_round = 1
        # self.paceMaker = Pacemaker()
        # self.safety = Safety()
        self.mempool = Mempool()
        self.last_tc = TC(0, [0]*(2*(self.f)+1), [None]*(2*(self.f)+1))

    # def receive(msg=("PrepareHandler1",   ), from_=c):
    #     print("reached PreareHandler1")
    #     # print(digest.message, digest.signature)
    #     # output("received message prepare from client ", c)
    #     verify_key = VerifyKey(self.clientPublicKeyMap[c])
    #     # print(self, " am verifying from client ", c,
    #     #       verify_key.verify(digest))
    #     # forged = digest[:-1] + bytes([int(digest[-1]) ^ 1])
    #     # print(verify_key.verify(forged))

    #     send(("Prepared1",), to=c)

    # def receive(msg=("PrepareHandler2",  digest), from_=c):
    #     print("reached PreareHandler2")
    #     # print(digest.message, digest.signature)
    #     # output("received message prepare from client ", c)
    #     verify_key = VerifyKey(self.clientPublicKeyMap[c])
    #     # print(self, " am verifying from client ", c,
    #     #       verify_key.verify(digest))
    #     # forged = digest[:-1] + bytes([int(digest[-1]) ^ 1])
    #     # print(verify_key.verify(forged))

    #     send(("Prepared2",), to=c)

    def receive(msg=("process_certificate_qc", qc), from_=c):
        self.blockTree.process_qc(qc)
        self.leaderElection.update_leaders(qc)
        self.paceMaker.advance_round(qc.vote_info.round)

    def process_certificate_qc(qc):
        self.blockTree.process_qc(qc)
        self.leaderElection.update_leaders(qc)
        self.paceMaker.advance_round(qc.vote_info.round)

    def process_new_round_event(last_tc):
        # Not sure what they are trying to check
        # TODO: Check code, change to get_leader and self.pacemaker.curr_round
        if self == self.leaderElection.get_round_robin_leader(self.curr_round):
            # output(" -----------  ", self, " am the leader.")
            # Create proposal Look into it again
            # print(self.mempool.get_transactions())
            b = self.blockTree.generate_block(self,
                                              self.curr_round, self.mempool.get_transactions())

            # TODO: Handle this
            # send(("process_proposal_message", b),
            #      to=self.replicaPublicKeyMap.keys())

    # I am confused if this is the same vote handler
    # because the sequence of these proceders in the papaer is different

    def receive(msg=("process_vote_msg", M), from_=c):
        qc = self.blockTree.process_vote(M)
        if qc != None:
            self.process_certificate_qc(qc)
            self.process_new_round_event(None)

    def receive(msg=("process_proposal_message", P)):
        self.process_certificate_qc(P.block.qc)
        self.process_certificate_qc(P.high_commit_qc)
        self.paceMaker.advance_round_tc(P.last_round_qc)
        round = self.paceMaker.current_round

        # it should be round but name converntions was a bit weird
        leader = self.leaderElection.get_leader(round)

        # need to confirm the data type of leader variable
        if P.block.round != round or P.sender != leader or P.block_author != leader:
            return None

        self.blockTree.execute_and_insert(P)
        vote_msg = self.safety.make_vote(P.block, P.last_round_tc)
        if vote_msg != None:
            # need to find receive handler for this send
            new_leader_name = self.leaderElection.get_leader(round + 1)

            # need to decide the message
            send(("process_vote_msg", P), to=new_leader_name)

    def receive(msg=("process_timeout_message", M), from_=c):
        self.process_certificate_qc(M.tmo_info.high_qc)
        self.process_certificate_qc(M.high_commit_qc)
        self.paceMaker.advance_round_tc(M.last_round_tc)
        tc = self.paceMaker.process_remote_timeout(M)
        if tc != None:
            self.paceMaker.advance_round(tc)
            self.process_new_round_event(tc)

    # receive handler for client requests
    def receive(msg=('Request', request), from_=c):
        output("Received ", request, "from ", c)
        if request in self.commit_cache:

            # TODO:Send previous response to client
            return
        if self.mempool.isEmpty():
            self.mempool.addTxns(request)
            if self.leaderElection.get_round_robin_leader(self.curr_round) == self:
                process_new_round_event(self.last_tc)
        else:
            self.mempool.addTxns(request)
        return

    def run():
        await(some(received(("process_vote_msg", M),)))
        await(some(received(("process_proposal_message", M),)))
        await(some(received(("process_timeout_message", M),)))
        await(some(received(("Request", request),)))
        print("here")
        if not self.mempool.isEmpty():
            output("Mempool not empty")

# type: ignore
import nacl.utils
from nacl.signing import SigningKey
from nacl.signing import VerifyKey
from pprint import pprint
from block_tree import BlockTree
from safety import Safety
from mempool import Mempool
from tc import TC
from vote_info import VoteInfo
from ledger_commit_info import LedgerCommitInfo
from qc import QC
from ledger import Ledger
import random
from timeoutMsg import TimeoutMsg
from tc import TC
import time


class ProposalMsg:
    def __init__(self, block, last_tc, high_commit_qc, safety):
        self.block = block
        self.last_tc = last_tc
        self.high_commit_qc = high_commit_qc
        self.signature = safety.sign(self.block.id)


class Replica(process):
    def setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f, t=25):
        self.privateKey = privateKey
        self.clientPublicKeyMap = clientPublicKeyMap
        self.replicaPublicKeyMap = replicaPublicKeyMap
        self.proposalMsgFlag = False
        # ---------- start leaderElection -------- #
        self.validators = list(replicaPublicKeyMap.keys())
        self.window_size = 4
        self.exclude_size = 1
        self.reputation_leaders = {}
        # ---------- end leaderElection -------- #

        self.commit_cache = {}
        self.f = f

        self.last_tc = TC(0, [0]*(2*(self.f)+1), [None]*(2*(self.f)+1))

        # ------------- Initialize ledger object -------- #
        self.mempool = Mempool()
        # -------------- End ledger initialization ------ #

        # ------------- Initialize ledger object -------- #
        self.ledger = Ledger(self, self.mempool)
        # -------------- End ledger initialization ------ #

        # --------------- Initialize block tree ---------- #
        self.blockTree = BlockTree(
            author=self, f=self.f, ledger=self.ledger)
        # --------------- End Initializing block tree ---------- #

        # -------------- start pacemaker attribute initialization ------------ #
        self.pacemaker_current_round = 1
        self.pacemaker_pending_timeouts = {}
        self.pacemaker_last_round_tc = TC(
            0, [0]*(2*(self.f)+1), [None]*(2*(self.f)+1))
        self.pacemaker_local_time = 5
        # -------------- end pacemaker attribute initialization -------------- #

        # -------------- initialize safety module ----------------------- #
        self.safety = Safety(
            self, self.ledger, self.blockTree, self.privateKey, self.replicaPublicKeyMap)
        # -------------- end safety module initialization --------------- #

    #################################################################
    ############## Start Pacemaker Function Definitions #############

    def Pacemaker_stop_timer(round):
        pass

    def Pacemaker_get_round_timer(round):
        random.seed(round)
        return random.randint(0, 8)
        # TODO: need to understand this formula for round_timer
        # return round_time(round)

    def Pacemaker_start_timer(new_round):
        self.proposalMsgFlag = True
        self.Pacemaker_stop_timer(self.pacemaker_current_round)
        self.pacemaker_current_round = new_round
        self.Pacemaker_local_time = Pacemaker_get_round_timer(
            self.pacemaker_current_round)

    def Pacemaker_local_timeout_round():
        timeoutInfo = self.safety.make_timeout(
            self, self.privateKey, self.pacemaker_current_round, self.blockTree.high_qc, self.pacemaker_last_round_tc)
        send(("process_timeout_message", TimeoutMsg(
            timeoutInfo, self.pacemaker_last_round_tc, self.blockTree.high_commit_qc)), to=self.validators)

    def Pacemaker_process_remote_timeout(tmo):
        tmo_info = tmo.tmo_info
        # output("))))))", tmo_info.round)

        if tmo_info.round < self.pacemaker_current_round:
            return None
        # if tmo_info.sender()
        if tmo_info.round not in self.pacemaker_pending_timeouts:

            self.pacemaker_pending_timeouts[tmo_info.round] = set()
            self.pacemaker_pending_timeouts[tmo_info.round].add(tmo_info)

        else:
            # Check if senders tmo_info is already present
            # If not, insert
            present = False
            for i in self.pacemaker_pending_timeouts[tmo_info.round]:
                if i.sender == tmo_info.sender:
                    present = True
            if not present:
                self.pacemaker_pending_timeouts[tmo_info.round].add(tmo_info)
        if len(self.pacemaker_pending_timeouts[tmo_info.round]) == self.f + 1:
            Pacemaker_local_timeout_round()
        if len(self.pacemaker_pending_timeouts[tmo_info.round]) == 2*self.f + 1:
            tmo_high_qc_rounds_list = []
            tmo_signatures_list = []
            for t in self.pacemaker_pending_timeouts[tmo_info.round]:
                tmo_high_qc_rounds_list.append(t.high_qc.vote_info.round)
                tmo_signatures_list.append(t.signature)
            return TC(tmo_info.round, tmo_high_qc_rounds_list, tmo_signatures_list)

    def Pacemaker_advance_round_tc(tc):
        if tc == None or tc.round < self.pacemaker_current_round:
            return False

        self.pacemaker_last_round_tc = tc
        # self.last_tc = tc
        # self.last_round_tc = tc
        self.Pacemaker_start_timer(tc.round + 1)
        return True

    def Pacemaker_advance_round_qc(qc):
        if qc.vote_info.round < self.pacemaker_current_round:
            return False

        self.pacemaker_last_round_tc = None
        # self.last_tc = None
        # self.last_round_tc = None
        self.Pacemaker_start_timer(qc.vote_info.round + 1)
        # return True

        # tmo_info = tmo.tmo_info
        # if tmo_info.round < self.pacemaker_current_round:
        #     return None
        # if tmo_info.sender not in pending_timeouts[tmo_info.round].senders:
        #     # pending_timeouts[tmo_info.round]
        #     len(pending_timeouts[tmo_info.round].senders) == self.f+1

    #################################################################
    ############## End Pacemaker Function Definitions #############

    #################################################################
    ############## Start LeaderElection Function Definitions #############

    def Leader_elect_reputation_leader(qc):
        active_validators = set()
        last_authors = set()
        current_qc = qc
        i = 0
        while i < self.window_size or len(last_authors) < self.exclude_size:
            if current_qc.vote_info.parent_id not in self.ledger.committed_ledger_tree.block_id_to_state:
                break
            else:

                # TODO: Different than paper
                current_block_id = current_qc.vote_info.parent_id
                current_block = self.blockTree.pending_block_tree.get_block(
                    current_block_id)
                if current_block is None:
                    break
                block_author = current_block.author
                if i < self.window_size:
                    # TODO: add signers
                    active_validators = active_validators.union(
                        current_qc.signers)
                if len(last_authors) < self.exclude_size:
                    last_authors.add(block_author)

                current_qc = current_block.qc
            i += 1
        active_validators = active_validators.difference(last_authors)
        if len(active_validators) == 0:
            return Leader_get_round_robin_leader(qc.vote_info.round + 2)

        else:
            random.seed(qc.vote_info.round)
            temp = random.sample(active_validators, 1)
            return temp[0]

    # def Leader_pick_one(active_validators, seed):

    def Leader_get_round_robin_leader(curr_round):
        # Round robin leader (2 rounds per leader)
        idx = (curr_round) % len(self.validators)
        return self.validators[idx]

    def Leader_get_leader(round):
        # TODO: IDK

        if round in self.reputation_leaders:
            return self.reputation_leaders[round]

        return self.Leader_get_round_robin_leader(round)

    def Leader_update_leaders(qc):
        extended_round = qc.vote_info.parent_round
        qc_round = qc.vote_info.round
        pacemaker_current_round = self.pacemaker_current_round
        if extended_round + 1 == qc_round and qc_round + 1 == pacemaker_current_round:
            # TODO: Check paper
            # self.leader = Leader_get_round_robin_leader(
            #     pacemaker_current_round + 1)
            # pass
            self.reputation_leaders[pacemaker_current_round +
                                    1] = Leader_elect_reputation_leader(qc)

            # self.reputation_leaders[pacemaker_current_round +
            #                         1] = election_reputation_leader(qc)

    #################################################################
    ############## End LeaderElection Function Definitions #############

    def process_certificate_qc(qc):
        wasCommitted, client = self.blockTree.process_qc(qc)
        if wasCommitted and client is not None:

            # TODO: Tell client
            send(("Reply", ),
                 to=client)
        self.Leader_update_leaders(qc)
        # TODO: Check paper : Code invalid
        self.Pacemaker_advance_round_qc(qc)

    def process_new_round_event(last_tc):
        # Not sure what they are trying to check
        # TODO: Check code, change to get_leader and self.pacemaker.curr_round
        if self == self.Leader_get_leader(self.pacemaker_current_round):
            output("I am leader of round", self.pacemaker_current_round)
            next_transaction = self.mempool.get_requested_transaction()
            output("My proposed transaction", next_transaction)
            if self == self.validators[2]:
                time.sleep(5)
            if next_transaction is None:
                # TODO: Return till timeout
                b = self.blockTree.generate_block(self,
                                                  self.pacemaker_current_round, ("", ""))
                # TODO: Handle this
                send(("process_proposal_message", ProposalMsg(b, last_tc, self.blockTree.high_commit_qc, self.safety)),
                     to=self.validators)
                pass
            else:
                b = self.blockTree.generate_block(self,
                                                  self.pacemaker_current_round, next_transaction)
                # TODO: Handle this
                send(("process_proposal_message", ProposalMsg(b, last_tc, self.blockTree.high_commit_qc, self.safety)),
                     to=self.validators)

    # I am confused if this is the same vote handler
    # because the sequence of these proceders in the papaer is different

    def receive(msg=("process_vote_msg", V), from_=c):
        qc, wasCommittedFlag, client = self.blockTree.process_vote(V)
        if wasCommittedFlag and client is not None:
            send(("Reply", ),
                 to=client)
        if qc != None:
            output("QC generated ")
            self.process_certificate_qc(qc)
            self.process_new_round_event(None)

    def receive(msg=("process_proposal_message", P), from_=r):
        self.process_certificate_qc(P.block.qc)
        self.process_certificate_qc(P.high_commit_qc)

        self.Pacemaker_advance_round_tc(P.last_tc)
        round = self.pacemaker_current_round
        # it should be round but name converntions was a bit weird
        temp_leader = self.Leader_get_leader(round)
        # need to confirm the data type of leader variable

        if P.block.round != round or r != temp_leader or P.block.author != temp_leader:
            return None

        self.blockTree.execute_and_insert(P.block)

        vote_msg = self.safety.make_vote(P.block, P.last_tc)
        if vote_msg != None:
            # need to find receive handler for this send
            new_leader_name = self.Leader_get_leader(round + 1)
            # need to decide the message
            self.mempool.make_transaction_pending(P.block.payload)
            send(("process_vote_msg", vote_msg), to=new_leader_name)

    def receive(msg=("process_timeout_message", T), from_=c):
        # output("Processing timeout message")
        self.process_certificate_qc(T.tmo_info.high_qc)
        self.process_certificate_qc(T.high_commit_qc)
        self.Pacemaker_advance_round_tc(T.last_round_tc)
        tc = self.Pacemaker_process_remote_timeout(T)
        # output("TC was generated")
        if tc != None:
            output("TC generated for round ", self.pacemaker_current_round)
            # output(vars(tc))
            self.Pacemaker_advance_round_tc(tc)
            self.process_new_round_event(tc)

    # receive handler for client requests
    def receive(msg=('Request', request), from_=c):
        request_tuple = (request, c)
        if request_tuple in self.ledger.commit_cache:

            # TODO:Send previous response to client
            send(("Reply", ),
                 to=c)
            return

        self.mempool.addTxns(request_tuple)
        return

    def run():
        process_new_round_event(self.last_tc)
        while True:
            if await(self.proposalMsgFlag):
                self.proposalMsgFlag = False

            elif timeout(4):
                # output("Getting called for round ",
                #        self.pacemaker_current_round)
                Pacemaker_local_timeout_round()

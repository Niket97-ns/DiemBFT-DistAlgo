# type: ignore
import pickle
import nacl.utils
from nacl.signing import SigningKey
from nacl.signing import VerifyKey
from pprint import pprint
from block_tree import BlockTree
from safety import Safety
from mempool import Mempool
from tc import TC
from util import sign
from vote_info import VoteInfo
from ledger_commit_info import LedgerCommitInfo
from qc import QC
from ledger import Ledger
import random
from timeoutMsg import TimeoutMsg
from tc import TC
import time
import util
import os
import traceback


class ProposalMsg:
    def __init__(self, block, last_tc, high_commit_qc, safety):
        self.block = block
        # TC for block.round - 1 if block.qc.vote_info.round != block.round - 1, else None
        self.last_tc = last_tc
        self.high_commit_qc = high_commit_qc   # QC to synchronize on committed blocks
        self.signature = safety.sign(self.block.id)


class Replica(process):

    def setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f, t, config):
        self.sync_up = {}
        self.testingFlag = True
        self.exitFlagCrashing = False

        self.config = config
        self.doneFlag = False
        self.privateKey = privateKey
        self.clientPublicKeyMap = clientPublicKeyMap
        self.replicaPublicKeyMap = replicaPublicKeyMap
        self.proposalMsgFlag = False
        if not os.path.isdir(config['test_case']):
            os.mkdir(config['test_case'])

        # ---------- start leaderElection -------- #
        self.validators = list(replicaPublicKeyMap.keys())
        self.window_size = 4
        self.exclude_size = 1
        self.reputation_leaders = {}
        # ---------- end leaderElection -------- #

        self.commit_cache = {}
        self.f = f

        self.last_tc = None

        # ------------- Initialize ledger object -------- #
        self.mempool = Mempool()
        # -------------- End ledger initialization ------ #

        # ------------- Initialize ledger object -------- #
        self.ledger = Ledger(self, self.mempool, config['test_case'])
        # -------------- End ledger initialization ------ #

        # --------------- Initialize block tree ---------- #
        self.blockTree = BlockTree(
            author=self, f=self.f, ledger=self.ledger)
        # --------------- End Initializing block tree ---------- #

        # -------------- start pacemaker attribute initialization ------------ #
        self.pacemaker_current_round = 1    # Initially zero
        self.pacemaker_pending_timeouts = {}    # Timeouts per round^a
        self.pacemaker_last_round_tc = None   # Initially None
        # self.pacemaker_last_round_tc = None
        self.pacemaker_local_time = 4
        # -------------- end pacemaker attribute initialization -------------- #

        # -------------- initialize safety module ----------------------- #
        self.safety = Safety(
            self, self.ledger, self.blockTree, self.privateKey, self.replicaPublicKeyMap)
        # -------------- end safety module initialization --------------- #

        # self.start = time.time()
        # self.max_time = -1
        self.one_round_time_timeout = 4 * 0.07

    #################################################################
    ############## Fault Injection part #############

    def setattr(attr, val):
        # we can't implement setattr using reflection, because the distalgo compiler
        # needs to transform the assignment statements.
        # if the updated attribute is in another class (e.g., Pacemaker), modify the
        # assignment statement accordingly.
        if attr == 'current_round':
            self.pacemaker_current_round = val
        elif attr == 'last_vote_round':
            last_vote_round = val
        else:
            pass
            # output('error: Replica.setattr: unsupported attribute')

    #################################################################
    ############## Start Pacemaker Function Definitions #############

    def Pacemaker_stop_timer(round):
        pass

    '''
        Pseudocode in Paper:
        return round timer formula
    '''
    def Pacemaker_get_round_timer(round):
        random.seed(round)
        return random.randint(0, 8)

    '''
        Pseudocode in Paper:
        stop_timer(current_round)
        current_round <- new_round
        start_local_timer for round current_round for duration get_round_timer(current_round)
    '''
    def Pacemaker_start_timer(new_round):
        self.Pacemaker_stop_timer(self.pacemaker_current_round)
        self.proposalMsgFlag = True
        self.pacemaker_current_round = new_round
        self.Pacemaker_local_time = Pacemaker_get_round_timer(
            self.pacemaker_current_round)

    '''
        Pseudocode in Paper:
        save_consensus_state()
        timeout_info <- Safety.make_timeout(current_round, Block-Tree.high_qc, last_round_tc)
        broadcast TimeoutMsg(timeout_info, last_round_tc, Block-Tree.high_commit_qc)
    '''
    def Pacemaker_local_timeout_round():

        timeoutInfo = self.safety.make_timeout(
            self, self.privateKey, self.pacemaker_current_round, self.blockTree.high_qc, self.pacemaker_last_round_tc)
        timeout_msg = TimeoutMsg(
            timeoutInfo, self.pacemaker_last_round_tc, self.blockTree.high_commit_qc)
        signed_timeout_msg = self.safety.sign(timeout_msg)

        send(("process_timeout_message", signed_timeout_msg), to=self.validators)

    '''
        Pseudocode in Paper:
        tmo_info <- tmo.tmo_info
        if tmo_info.round < current_round then
            return None
        if tmo_info.sender doesnt belong to pending_timeouts[tmo_info.round].senders then
            pending_timeouts[tmo_info.round] <- pending_timeouts[tmo_info:round] union {tmo_info}
        if |pending_timeouts[tmo_info.round].senders| == f + 1 then
            stop_timer(current_round)
            local_timeout_round() // Bracha timeout
        if |pending_timeouts[tmo_info.round].senders| == 2f + 1 then
            return TC (
                round <- tmo_info.round,
                tmo_high_qc_rounds <- {t.high_qc.round | t belongsTo pending_timeouts[tmo_info.round]},
                signatures <- {t.signature | t belongsTo pending_timeouts[tmo_info.round]})
                )
        return None
    '''
    def Pacemaker_process_remote_timeout(tmo):
        tmo_info = tmo.tmo_info

        if tmo_info.round < self.pacemaker_current_round:
            return None
        if tmo_info.round not in self.pacemaker_pending_timeouts:

            self.pacemaker_pending_timeouts[tmo_info.round] = set()
            self.pacemaker_pending_timeouts[tmo_info.round].add(tmo_info)

        else:
            present = False
            for i in self.pacemaker_pending_timeouts[tmo_info.round]:
                if i.sender == tmo_info.sender:
                    present = True
            if not present:
                self.pacemaker_pending_timeouts[tmo_info.round].add(tmo_info)
        if len(self.pacemaker_pending_timeouts[tmo_info.round]) == self.f + 1:
            Pacemaker_local_timeout_round()

        if len(self.pacemaker_pending_timeouts[tmo_info.round]) == 2*self.f + 1:
            # Create a list of signatures and high qc rounds
            tmo_high_qc_rounds_list = []
            tmo_signatures_list = set()
            for t in self.pacemaker_pending_timeouts[tmo_info.round]:
                if t is None or t.high_qc is None or t.high_qc.vote_info is None or t.high_qc.vote_info.round is None:
                    tmo_high_qc_rounds_list.append(None)
                else:
                    tmo_high_qc_rounds_list.append(t.high_qc.vote_info.round)

                # tuple of sender and sign
                # tmo_signatures_list.append((t.sender, t.signature))
                tmo_signatures_list.add((t.sender, t.signature))
            return TC(tmo_info.round, tmo_high_qc_rounds_list, tmo_signatures_list)

    '''
        Pseudocode in Paper:
        if tc = None or tc.round < current_round then
            return false
        last_round_tc <- tc
        start_timer(tc.round + 1)
        return true
    '''
    def Pacemaker_advance_round_tc(tc):
        if tc == None or tc.round < self.pacemaker_current_round:
            return False
        self.pacemaker_last_round_tc = tc
        self.Pacemaker_start_timer(tc.round + 1)
        return True

    '''
        Pseudocode in Paper:
        if qc.vote_info.round < current_round then
            return false
        last_round_tc <- None
        start_timer(qc.vote_info.round + 1)
        return true
    '''
    def Pacemaker_advance_round_qc(qc):
        if qc is None:
            return False
        elif qc.vote_info.round is None:
            return False
        elif qc.vote_info.round < self.pacemaker_current_round:
            return False
        self.pacemaker_last_round_tc = None
        self.Pacemaker_start_timer(qc.vote_info.round + 1)

    #################################################################
    ############## End Pacemaker Function Definitions #############

    #################################################################
    ############## Start LeaderElection Function Definitions #############

    '''
        Pseudocode in Paper:
        active validators <- {} ; // validators that signed the last window size committed blocks
        last authors <- {} ; // ordered set of authors of last exclude size committed blocks
        current qc <- qc
        for i = 0; i < window_size or |last_authors| < exclude_size; i <- i + 1 do
            current_block <- Ledger.committed_block(current_qc.vote_info.parent_id)
            block_author <- current_block.author
            if i < window_size then
                active_validators <- active_validators union current_qc.signatures.signers()
                // |current_qc.signatures.signers()| >= 2f + 1
            if |last_authors| < exclude_size then
                last_authors <- last_authors union {block_author}
            current_qc <- current_block.qc
        active_validators <- active_validators \ last_authors // contains at least 1 validator
        return active_validators.pick_one(seed <- qc.voteinfo.round)
    '''
    def Leader_elect_reputation_leader(qc):
        # validators that signed the last window size committed blocks
        active_validators = set()
        last_authors = set()   # ordered set of authors of last exclude size committed blocks
        current_qc = qc
        i = 0

        while i < self.window_size or len(last_authors) < self.exclude_size:

            if current_qc is None or current_qc.vote_info.parent_id is None or current_qc.vote_info.parent_id not in self.ledger.committed_ledger_tree.block_id_to_state:

                break
            else:
                current_block_id = current_qc.vote_info.parent_id
                current_block = self.blockTree.pending_block_tree.get_block(
                    current_block_id)
                if current_block is None:
                    break
                block_author = current_block.author
                if i < self.window_size:
                    active_validators = active_validators.union(
                        current_qc.signers)
                if len(last_authors) < self.exclude_size:
                    last_authors.add(block_author)

                current_qc = current_block.qc

            i += 1

        active_validators = active_validators.difference(last_authors)

        if len(active_validators) == 0:
            return Leader_get_round_robin_leader(qc.vote_info.round + 2)

        else:
            random.seed(qc.vote_info.round)
            temp = random.sample(active_validators, 1)
            return temp[0]

    # def Leader_pick_one(active_validators, seed):

    def Leader_get_round_robin_leader(curr_round):
        idx = (curr_round) % len(self.validators)
        return self.validators[idx]

    '''
        Pseudocode in Paper:
        if (round, leader) belongsTo reputation_leaders then
            return leader // Reputation-based leader
        return validators[floor(round/2) mod |validators|] // Round-robin leader (two rounds per leader)
    '''
    def Leader_get_leader(round):
        if round in self.reputation_leaders:
            return self.reputation_leaders[round]
        return self.Leader_get_round_robin_leader(round)

    '''
        Pseudocode in Paper:
        extended_round <- qc.vote_info.parent_round
        qc.round <- qc.vote_info.round
        current_round <- PaceMaker.current_round
        if extended_round + 1 = qc_round and qc_round + 1 = current_round then
            reputation_leaders[current_round + 1] <- elect_reputation_leader(qc)
    '''
    def Leader_update_leaders(qc):
        # check for none values
        if qc is not None:
            if qc.vote_info is not None:
                if qc.vote_info.parent_round is not None:
                    extended_round = qc.vote_info.parent_round
                    qc_round = qc.vote_info.round
                else:
                    extended_round = None
                    qc_round = None
            else:
                extended_round = None
                qc_round = None

        else:
            extended_round = None
            qc_round = None
        pacemaker_current_round = self.pacemaker_current_round
        if extended_round is not None and qc_round is not None and extended_round + 1 == qc_round and qc_round + 1 == pacemaker_current_round:
            self.reputation_leaders[pacemaker_current_round +
                                    1] = Leader_elect_reputation_leader(qc)

    #################################################################
    ############## End LeaderElection Function Definitions #############

    '''
        Pseudocode in Paper:
        Block-Tree.process_qc(qc)
        LeaderElection.update_leaders(qc)
        Pacemaker.advance_round(qc.vote_info.round)
    '''
    def process_certificate_qc(qc):
        wasCommitted, client = self.blockTree.process_qc(qc)
        if wasCommitted and client is not None and client != "":
            send(('Reply', self), to=client)

        self.Leader_update_leaders(qc)
        self.Pacemaker_advance_round_qc(qc)

    '''
        Pseudocode in Paper:
        if u = LeaderElection.get_leader(Pacemaker.current_round) then
            // Leader code: generate proposal.
            b <- Block-Tree:generate_block(MemPool.get_transactions(), Pacemaker.current_round)
            broadcast ProposalMsg(b, last_tc, Block-Tree.high_commit_qc)
    '''
    def process_new_round_event(last_tc):
        if self == self.Leader_get_leader(self.pacemaker_current_round):
            output("LEADER ELECTED FOR ROUND ",
                   self.pacemaker_current_round, " = ", self)

            next_transaction = self.mempool.get_requested_transaction()
            if next_transaction is None:
                b = self.blockTree.generate_block(self,
                                                  self.pacemaker_current_round, ("", ""))
                new_proposal = ProposalMsg(
                    b, last_tc, self.blockTree.high_commit_qc, self.safety)
                signed_proposal = self.safety.sign(new_proposal)
                output("BROADCASTING PROPOSAL FOR ROUND ",
                       self.pacemaker_current_round, " --- ("", "")")
                send(("process_proposal_message", signed_proposal),
                     to=self.validators)
                pass
            else:
                b = self.blockTree.generate_block(self,
                                                  self.pacemaker_current_round, next_transaction)
                new_proposal = ProposalMsg(
                    b, last_tc, self.blockTree.high_commit_qc, self.safety)
                signed_proposal = self.safety.sign(new_proposal)
                send(("process_proposal_message", signed_proposal),
                     to=self.validators)
                output("BROADCASTING PROPOSAL FOR ROUND ",
                       self.pacemaker_current_round, " --- ", next_transaction)

    #############################################################
    ############## Start Receive Handlers Definations #######################

    '''
        Pseudocode in Paper:
        qc <- Block-Tree.process_vote(M)
        if qc != None then
            process_certificate_qc(qc)
            process_new_round_event(None)
    '''
    # Receive handler for vote messages
    def receive(msg=("process_vote_msg", V), from_=c):
        verifyKeySender = VerifyKey(self.replicaPublicKeyMap[c])
        try:
            # verify sender signature and message
            verifyKeySender.verify(V.message, V.signature)
            V = pickle.loads(V.message)
            V = V[0]
            qc, wasCommittedFlag, client = self.blockTree.process_vote(V)

            if wasCommittedFlag and client is not None and client != "":
                pass
                # output("******* SENDING ACKNOWLEDGEMENT TO ", c)
                # send(('Reply', self), to=client)

            if qc != None:
                # QC generated.
                output("******* QC GENERATED FOR ROUND ",
                       qc.vote_info.round, " *******")

                self.process_certificate_qc(qc)
                self.process_new_round_event(None)
        except:
            output("!!!!!!!!! UNABLE TO VERIFY VOTE FROM ", c, " FOR ROUND ",
                   self.pacemaker_current_round, " !!!!!!!!!")

    '''
        Pseudocode in Paper:
        process_certificate_qc(P.block.qc)
        process_certificate_qc(P.high_commit_qc)
        Pacemaker.advance_round_tc(P.last_round_tc)
        round <- Pacemaker.current_round
        leader <- LeaderElection.get_leader(current_round)
        if P.block.round != round or P.sender != leader or P.block.author != leader then
            return
        Block-Tree.execute_and_insert(P) // Adds a new speculative state to the Ledger
        vote_msg <- Safety:make_vote(P.block; P.last_round_tc)
        if vote_msg != None then
            send vote_msg to LeaderElection.get_leader(current_round + 1)
    '''
    # Receive handler for proposal messages
    def receive(msg=("process_proposal_message", P), from_=r):

        verifyKeySender = VerifyKey(self.replicaPublicKeyMap[r])
        try:
            # Verify sender signature and message
            verifyKeySender.verify(P.message, P.signature)
            P = pickle.loads(P.message)
            P = P[0]
            self.process_certificate_qc(P.block.qc)
            self.process_certificate_qc(P.high_commit_qc)

            self.Pacemaker_advance_round_tc(P.last_tc)

            round = self.pacemaker_current_round
            temp_leader = self.Leader_get_leader(round)
            # print("----->")

            if P.block.round != round or r != temp_leader or P.block.author != temp_leader or (P.block.payload != ('', '') and P.block.payload not in self.mempool.q):
                # if P.block.round > round:
                # Can add replica sync up code here
                # PSEUDOCODE FOR BRINGING VALIDATORS UPTO DATE (NOT IMPLEMENTED):

                # When a validator receives a block with id greater than it's current round, it broadcasts a "need_sync_up"
                # message to all replicas. After verifying the replica's identity, the other replicas send the "requiring sync_up" replica the following in signed message format:

                # 1. blockTree.high_qc
                # 2. blockTree.high_commit_qc
                # 3. last_tc
                # 4. ledger_file_contents
                # 5. ledger_tree
                # 6. pending_blocks
                # 7. mempool

                # The replica will wait for a quorum of such signatures, and once it receives this, it will change its
                # state to the received state of the quorum

                # PSEUDOCODE:

                # if P.block.id > self.pacemaker_current_round:
                #   broadcast("need_sync_up", to=all_replicas)

                # if received("need_sync_up", from=r):
                #   verify(r)
                #   send the above mentioned data, signed, to r
                #   send(("sync_up_data", signature) ,to=r)

                # if received(("sync_up_data", signature), from = r):
                #   verify(r)
                #   Maintain hashmap[signature] = set of senders
                #   if len(set) == quorum:
                #       set objects to data retrived from signature
                return None

            self.blockTree.execute_and_insert(P.block)

            vote_msg = self.safety.make_vote(P.block, P.last_tc)

            if vote_msg != None:

                new_leader_name = self.Leader_get_leader(round + 1)
                if P.block.payload != ("", ""):
                    self.mempool.make_transaction_pending(P.block.payload)

                signed_vote_msg = self.safety.sign(vote_msg)
                # output("sending vote to ", r, " FOR ROUND ",
                #    self.pacemaker_current_round)
                # self.proposalMsgFlag = True
                if config['test_case'] == 'vote_message_dropped_randomly':
                    if 0.05 < random.random():
                        send(("process_vote_msg", signed_vote_msg), to=new_leader_name)
                    return
                if config['test_case'] == 'vote_message_delayed_randomly':
                    if 0.05 > random.random():
                        time.sleep(3)

                send(("process_vote_msg", signed_vote_msg), to=new_leader_name)
        except:
            output("!!!!!!!!! UNABLE TO VERIFY PROPOSAL FROM ", r, " FOR ROUND ",
                   self.pacemaker_current_round, " !!!!!!!!!")

    '''
        Pseudocode in Paper:
        process_certificate_qc(M.tmo_info.high_qc)
        process_certificate_qc(M.high_commit_qc)
        Pacemaker.advance_round_tc(M.last_round_tc)
        tc <- Pacemaker.process_remote_timeout(M)
        if tc != None then
            Pacemaker.advance_round(tc)
            process_new_round_event(tc)
    '''
    # Receive handler for timeout messages
    def receive(msg=("process_timeout_message", T), from_=c):
        verifyKeySender = VerifyKey(self.replicaPublicKeyMap[c])
        try:
            # verify sender and message
            verifyKeySender.verify(T.message, T.signature)
            T = pickle.loads(T.message)
            T = T[0]
            self.process_certificate_qc(T.tmo_info.high_qc)
            self.process_certificate_qc(T.high_commit_qc)
            self.Pacemaker_advance_round_tc(T.last_round_tc)
            tc = self.Pacemaker_process_remote_timeout(T)
            if tc != None:
                # TC generated
                output(" TC GENERATED FOR ROUND ", tc.round)

                self.Pacemaker_advance_round_tc(tc)
                self.process_new_round_event(tc)
        except:
            pass

    # receive handler for client requests
    def receive(msg=('Request', request, message_to_hash, digest), from_=c):
        output("******** RECEIVED REQUEST ",
               request, " FROM ", c, "***********")
        request_tuple = (request, c)
        if util.checkDigest(message_to_hash, digest):
            # if request already committed, respond from commit_cache.
            if request_tuple in self.ledger.commit_cache:
                output("******* SENDING ACKNOWLEDGEMENT TO ", c,
                       " FOR REQUEST ", request, "***********")
                send(('Reply', self), to=c)
                return
            self.mempool.addTxns(request_tuple)
        return

    def receive(msg=('done', "Done")):
        self.doneFlag = True

    ############## End  Receive Handlers Definations#######################
    ######################################################################

    def run():
        output(self, " process started ")
        process_new_round_event(self.last_tc)
        while True:
            if await(self.exitFlagCrashing):
                break
            elif await(self.doneFlag and self.mempool.allCommitted()):
                break
            elif await(self.proposalMsgFlag):
                self.proposalMsgFlag = False
            elif timeout(self.one_round_time_timeout):
                Pacemaker_local_timeout_round()
        output(self, " process exiting ")

        exit()


class ReplicaFI(process, Replica):
    # override send method
    def setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f, t, config):
        super().setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f, t, config)
        self.exitFlag = False
        random.seed(config['seed'])

    def send(M, to):
        # do original send
        # imagine that attr and val were obtained from a misbehavior spec.

        # Check the type of test_case and trigger the requred condition
        if config['test_case'] != 'happy_path':
            if M[0] == "process_proposal_message":
                if config['test_case'] == 'leader_delayed':
                    time.sleep(2)
            if M[0] == "process_vote_msg":
                if config['test_case'] == 'crashed_while_voting':
                    self.exitFlag = True
                    return 
                if config['test_case'] == 'vote_message_dropped':
                    return
        super().send(M, to)
    
    # If this faulty replica is leader crash it else keep the usual working.
    def process_new_round_event(last_tc):
        if self == self.Leader_get_leader(self.pacemaker_current_round):
            if config['test_case'] == 'leader_crashed':
                output(self, "I am leader and I crashed !!!!!!!!!!!!!!!!!!!!!")
                self.exitFlag = True
                exit()
        super().process_new_round_event(last_tc)


    def run():
        output(self, " process started ")
        process_new_round_event(self.last_tc)
        while True:
            if await(self.exitFlag):
                exit()
            elif await(self.doneFlag and self.mempool.allCommitted()):
                break
            elif await(self.proposalMsgFlag):
                self.proposalMsgFlag = False

            elif timeout(self.pacemaker_local_time):
                output("Timing out")
                Pacemaker_local_timeout_round()

        output(self, " process exiting ")
        exit()

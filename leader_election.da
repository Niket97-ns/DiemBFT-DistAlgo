# type: ignore


# TODO: Reputation Leaders
class LeaderElection:
    def __init__(self, validators, window_size=None, exclude_size=None, reputation_leaders=None) -> None:
        self.validators = validators  # The list of current validators
        # self.window_size = window_size  # A parameter for the leader reputation algorithm
        # self.exclude_size = exclude_size  # Between f and 2f, number of excluded authors of last committed blocks
        # self.reputation_leaders = reputation_leaders  # Map from round members to leaders elected due to the reputation scheme

    def minus(self, active_validators, last_authors):
        # TODO: Change this to actually remove last_authors after you know the data types
        return active_validators

    def update_leaders(self, qc):
        extended_round = qc.vote_info.parent_round
        qc_round = qc.vote_info.round
        current_round = pace_maker.PaceMaker.current_round
        if extended_round + 1 == qc_round and qc_round + 1 == current_round:
            self.reputation_leaders[current_round +
                                    1] = election_reputation_leader(qc)

    def get_round_robin_leader(self, curr_round):
        # Round robin leader (2 rounds per leader)
        idx = (curr_round//2) % len(self.validators)
        return self.validators[idx]

    def pick_one(self, seed):
        # TODO: How to use seed to pick one?
        idx = (seed//2) % len(self.validators)
        return self.validators[idx]

    def get_leader(self, round):
        if round in self.reputation_leaders:
            return self.reputation_leaders[round]
        return self.get_round_robin_leader(round, self.validators)

    def elect_reputation_leader(self, qc):
        active_validators = []  # Validators that signed the last window_size committed blocks
        last_authors = []  # Ordered set of authors of last excluded_size committed blocks
        current_qc = qc
        i = 0
        while i < self.window_size or len(last_authors) < self.exclude_size:
            current_block = None
            # TODO: Uncomment after adding code
            # current_block = Ledger.committed_block(current_qc.vote_info.parent_id)
            block_author = current_block.author

            if i < self.window_size:
                # len(current_qc.signatures.signers()) >= 2f + 1
                active_validators.append(current_qc.signatures.signers())

            if len(last_authors) < self.exclude_size:
                last_authors.append(block_author)

            current_qc = current_block.qc
            i = i+1

        # contains atleast one validator
        active_validators = self.minus(active_validators, last_authors)

        # TODO: What is seed? How to pick one?
        # return active_validators.pick_one(seed <- )
        return self.pick_one(qc.vote_info.round)

# type: ignore
from block import Block
from qc import QC
from collections import defaultdict
from ledger import Ledger
from pprint import pprint
from vote_info import VoteInfo
from ledger_commit_info import LedgerCommitInfo
from qc import QC
from util import createConcatString, createDigest


class PendingBlockTree:

    def __init__(self) -> None:
        self.id_to_block = {}  # Map: id - block
        self.root = None
        self.current_leaf = None

    def get_block(self, block_id):
        if block_id not in self.id_to_block:
            return None
        else:
            return self.id_to_block[block_id]

    def __fork_and_add(self, block):
        # abandon current_leaf
        self.id_to_block.pop(self.current_leaf)
        # add new block to map
        self.id_to_block[block.id] = block
        # assign self.current_leaf to this block
        self.current_leaf = block
        # can the parennt block for the new block be different than self.current_leaf?
        # if yes then what to do?

    def add(self, block):
        self.id_to_block[block.id] = block
        # simple case without forking
        # should we verify that the qc.vote_info.id == self.current_leaf.id?
        self.current_leaf = block
        # since block already has qc, which already has block_id of parent
        # is there any other specific pointer to the parent even needed?
        # the map should take care of it imo

    def prune(self, parent_id):
        # this parent_id will be the new root
        # abandon all values in the tree that dont belong to the branch
        # from self.current_leaf to root
        # then make parent_id the new root
        blocks_in_curr_branch = []
        blocks_in_curr_branch.append(self.current_leaf.id)
        blocks_in_curr_branch.append(self.current_leaf.get_parent_id())
        blocks_in_curr_branch.append(parent_id)

        for block_id in self.id_to_block:
            if block_id not in blocks_in_curr_branch:
                del self.id_to_block[block_id]

        self.root = self.id_to_block[parent_id]


class BlockTree:

    def __init__(self, author, f, ledger) -> None:
        vote_info = VoteInfo()
        ledger_commit_info = LedgerCommitInfo(vote_info=vote_info)

        self.high_qc = None
        self.high_commit_qc = None
        self.f = f

        self.pending_block_tree = PendingBlockTree()
        self.pending_votes = {}
        self.ledger = ledger
        self.author = author

        self.pending_signers = {}

    def process_qc(self, qc):
        wasCommitted = False
        client = None

        # TODO: RECHECK ONCE for values of ledger commit info and commit state id
        if qc != None and qc.ledger_commit_info != None and qc.ledger_commit_info.commit_state_id != None:
            if qc.vote_info.parent_id is not None:
                wasCommitted, client = self.ledger.commit(
                    qc.vote_info.parent_id)

            # parent becomes new root we remove the committed message from the ppending tree
            # TODO: Prune
            # self.pending_block_tree.prune(qc.vote_info.parent_id)
            # still a bit doubtful
            # print(self.high_commit_qc.vote_info.round)
            if self.high_commit_qc is None:
                self.high_commit_qc = qc

            elif qc.vote_info is not None and qc.vote_info.round is not None and self.high_commit_qc.vote_info.round is not None and qc.vote_info.round > self.high_commit_qc.vote_info.round:
                self.high_commit_qc = qc
            else:
                self.high_commit_qc = qc
        if qc is not None and self.high_qc is not None and self.high_qc.vote_info is not None and self.high_qc.vote_info.round is not None and qc.vote_info is not None and qc.vote_info.round is not None and qc.vote_info.round > self.high_qc.vote_info.round:
            self.high_qc = qc
        elif qc is not None:
            self.high_qc = qc
        return wasCommitted, client

    def execute_and_insert(self, block):
        self.ledger.speculate(block.qc, block.id, block.payload)
        self.pending_block_tree.add(block)

    def process_vote(self, v):
        wasCommitted, client = self.process_qc(v.high_commit_qc)
        vote_idx = createDigest(createConcatString(v.ledger_commit_info))[0]

        if vote_idx not in self.pending_votes:
            self.pending_votes[vote_idx] = set()
            self.pending_signers[vote_idx] = set()

        self.pending_signers[vote_idx].add(v.author)
        self.pending_votes[vote_idx].add(
            (v.author, v.signature))  # tuple of sender and sign

        if len(self.pending_votes[vote_idx]) == 2 * self.f + 1:  # Quorum formed
            # Alert NOT sure about exe_state_id

            # TODO: Adding signature of author in qc
            qc = QC(vote_info=v.vote_info,
                    signatures=self.pending_votes[vote_idx],
                    ledger_commit_info=v.ledger_commit_info,
                    author=self.author,
                    signers=self.pending_signers[vote_idx]
                    )
            return qc, wasCommitted, client
        return None, wasCommitted, client

    def generate_block(self, author, curr_round, txns):
        return Block(author, curr_round, txns, self.high_qc)

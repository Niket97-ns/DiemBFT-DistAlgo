# type: ignore

import replica
import client
import nacl.utils
from nacl.signing import SigningKey
import time
import json
from pprint import pprint
import sys


class DiemBFT(process):
    def setup(config):
        self.numberOfClients = config["numberOfClients"]
        self.numberOfReplicas = config["numberOfReplicas"]
        self.numberOfFaulty = config["numberOfFaulty"]

    def generateKeys():
        sk = SigningKey.generate()
        pk = sk.verify_key
        return (sk, pk.encode())

    def run():
        replicas = new(replica.Replica,
                       num=self.numberOfReplicas - self.numberOfFaulty)
        replicasFI = new(replica.ReplicaFI, num=self.numberOfFaulty)
        clients = new(client.Client, num=self.numberOfClients)
        replicaPublicKeyMap, clientPublicKeyMap = {}, {}

        privateKeyMap = {}
        for r in replicas:
            privateKeyMap[r], replicaPublicKeyMap[r] = generateKeys()

        for r in replicasFI:
            privateKeyMap[r], replicaPublicKeyMap[r] = generateKeys()

        for c in clients:
            privateKeyMap[c], clientPublicKeyMap[c] = generateKeys()

        for r in replicas:
            setup(r, (privateKeyMap[r], clientPublicKeyMap,
                  replicaPublicKeyMap, (self.numberOfReplicas-1)//3, 25, config, ))

        for r in replicasFI:
            setup(r, (privateKeyMap[r], clientPublicKeyMap,
                  replicaPublicKeyMap, (self.numberOfReplicas-1)//3, 25, config, ))

        for c in clients:
            setup(c, (privateKeyMap[c], clientPublicKeyMap,
                  replicaPublicKeyMap, (self.numberOfReplicas-1)//3, 10, 2, 25,))

        start(replicas | replicasFI)
        start(clients)
        # start(replicasFI)
        await(each(c in clients, has=received(('done',), from_=c)))
        # await(len(setof(r, received(('done',), from_=c))) == self.numberOfClients)
        send(('done', "Done",), to=(replicasFI | replicas))

        exit()


def main():
    with open("test_case_config.json", 'r') as reader:
        configStr = reader.read()
        configs = json.loads(configStr)
        if len(sys.argv) == 2:
            config = configs[sys.argv[1]]
            output("*************************",config['test_case'],"*****************")
            output("Number of Clients : ",config['numberOfClients']," Number of Replicas:",config['numberOfReplicas'], " Faulty Replicas ",config['numberOfFaulty'] )
            p = new(DiemBFT)
            setup(p, (config,))
            start(p)
        else:
            config = configs['happy_path']
            output("*************************",config['test_case'],"*****************")
            p = new(DiemBFT)
            setup(p, (config,))
            start(p)

    # configs = [{"numberOfClients": 1, "numberOfReplicas": 4,
    #             "numberOfFaulty": 1, "test_case": "leader_crashed"}]

    # for config in configs:
    #     # output("*************************",
    #     #    config['test_case'], "*****************")
    #     # output("Number of Clients : ", config['numberOfClients'], " Number of Replicas:",
    #     #    config['numberOfReplicas'], " Faulty Replicas ", config['numberOfFaulty'])
    #     p = new(DiemBFT)
    #     setup(p, (config,))
    #     start(p)

    exit()

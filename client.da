# type: ignore
import replica

import nacl.utils
from nacl.signing import SigningKey
import random
import time
import util


class Client(process):
    def setup(privateKey, clientPublicKeyMap, replicaPublicKeyMap, f=0, number_of_requests=4, seed=2, t=25):
        self.f = f      # Maximum Byzantine Fault Tolerance
        self.privateKey = privateKey
        self.clientPublicKeyMap = clientPublicKeyMap
        self.replicaPublicKeyMap = replicaPublicKeyMap
        # Number of requests the client has
        self.number_of_requests = number_of_requests
        self.t = t

        random.seed(seed)
        # Initial delay after which client sends request
        self.delay = set_initial_delay()
        self.request_number = 1    # Initial request number

    def run():
        while self.request_number <= self.number_of_requests:
            time.sleep(self.delay)
            self.delay = set_initial_delay()
            request = str(self)+"-"+str(request_number)
            encoded_request = str.encode(request)
            digest, msg_to_send = util.createDigest(encoded_request)
            send(('Request', request, msg_to_send, digest),
                 to=self.replicaPublicKeyMap.keys())
            # wait for f+1 responses for replicas
            if await(len(setof(r, received(('Reply', _), from_=r))) > self.f + 1):
                self.request_number += 1
                output(self, " received acknowledgment for ", request)
                reset(received)
            elif timeout(6):
                output("TIMED OUT FOR REQUEST ", request, "!! RETRANSMITTING")
        # Send done to parent process when all requests have been served.
        send(('done',), to=parent())
        # Exit
        exit()

    def set_initial_delay():
        return random.randint(0, 1)//1000
